[{"/home/www/autoparts/client/src/index.js":"1","/home/www/autoparts/client/src/App.js":"2","/home/www/autoparts/client/src/Components/Auth.js":"3","/home/www/autoparts/client/src/Components/ClientsTable.js":"4","/home/www/autoparts/client/src/Components/ChangePass.js":"5","/home/www/autoparts/client/src/Components/Modal.js":"6","/home/www/autoparts/client/src/Components/Popup.js":"7","/home/www/autoparts/client/src/Components/Common/DataTable.js":"8","/home/www/autoparts/client/src/Components/Common/Converter.js":"9","/home/www/autoparts/client/src/Components/Common/Pager.js":"10"},{"size":298,"mtime":1678895039085,"results":"11","hashOfConfig":"12"},{"size":1601,"mtime":1696970983001,"results":"13","hashOfConfig":"12"},{"size":2430,"mtime":1678895039081,"results":"14","hashOfConfig":"12"},{"size":3976,"mtime":1678895039085,"results":"15","hashOfConfig":"12"},{"size":2044,"mtime":1678895039085,"results":"16","hashOfConfig":"12"},{"size":8862,"mtime":1678895039085,"results":"17","hashOfConfig":"12"},{"size":1267,"mtime":1678895039085,"results":"18","hashOfConfig":"12"},{"size":7844,"mtime":1678895039085,"results":"19","hashOfConfig":"12"},{"size":2222,"mtime":1678895039085,"results":"20","hashOfConfig":"12"},{"size":629,"mtime":1678895039085,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"u0mb1k",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/www/autoparts/client/src/index.js",[],[],"/home/www/autoparts/client/src/App.js",["57","58","59","60"],[],"/home/www/autoparts/client/src/Components/Auth.js",["61","62"],[],"import axios from \"axios\";\nimport React, { useState } from \"react\";\n\nfunction setCookie(name,value,days) {\n    var expires = \"\";\n    if (days) {\n        var date = new Date();\n        date.setTime(date.getTime() + (days*24*60*60*1000));\n        expires = \"; expires=\" + date.toUTCString();\n    }\n    document.cookie = name + \"=\" + (value || \"\")  + expires + \"; path=/\";\n}\nfunction getCookie(name) {\n    var nameEQ = name + \"=\";\n    var ca = document.cookie.split(';');\n    for(var i=0;i < ca.length;i++) {\n        var c = ca[i];\n        while (c.charAt(0)==' ') c = c.substring(1,c.length);\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\n    }\n    return null;\n}\n\nconst Auth = () => {\n\n    const isLoggedIn = getCookie(\"sessionId\");\n\n    if(isLoggedIn !== null) window.location.href = \"/main\";\n\n    const [formData, setFormData] = useState({\n        userName: \"\",\n        password: \"\"\n    })\n\n    const authorization = () => {\n        axios.post(\"/users/auth\", formData)\n            .then((response) => {\n                response = response.data;\n                if(response.access !== \"danied\") {\n                    setCookie(\"sessionId\", response.sessionId)\n                    window.location.reload();\n                }\n            })\n            .catch((err) => {\n                alert(err.response.data.message)\n            })\n    }\n\n  return (\n    <div className=\"auth-container\">\n      <div className=\"auth-box\">\n        <h2 className=\"title\">ავტორიზაცია</h2>\n        <div className=\"form-fields\" style={{padding: \"0px 20px\"}}>\n          <label htmlFor=\"model\">მომხმარებლის სახელი</label>\n          <input\n            type=\"text\"\n            id=\"model\"\n            className=\"modal-form-control\"\n            onChange={(e) => setFormData((prev) => {return {...prev, userName: e.target.value}})}\n          />\n        </div>\n        <div className=\"form-fields\" style={{padding: \"0px 20px\"}}>\n          <label htmlFor=\"model\">პაროლი</label>\n          <input\n            type=\"password\"\n            id=\"model\"\n            className=\"modal-form-control\"\n            onChange={(e) => setFormData((prev) => {return {...prev, password: e.target.value}})}\n          />\n        </div>\n        <div className=\"submit-button\" onClick={authorization} >შესვლა</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Auth;\n","/home/www/autoparts/client/src/Components/ClientsTable.js",[],[],"/home/www/autoparts/client/src/Components/ChangePass.js",[],[],"/home/www/autoparts/client/src/Components/Modal.js",["63"],[],"import axios from \"axios\";\nimport React, { useState } from \"react\";\nimport close from \"../icons/close.png\";\n\nconst Modal = ({\n  addNew,\n  title,\n  onEdit,\n  buttonText,\n  hideModal,\n  record,\n  addRecord,\n  recordsList,\n}) => {\n  const [formData, setFormData] = useState({\n    mark: addNew ? \"\" : record.mark,\n    location: addNew ? \"\" : record.location,\n    phone: addNew ? \"\" : record.phone,\n    model: addNew ? \"\" : record.model,\n    comment: addNew ? \"\" : record.comment,\n  });\n\n  const phones = !addNew ? record.phone.split(\",\") : [];\n\n  const addNewRecord = () => {\n    axios\n      .post(\"/records\", formData)\n      .then((response) => {\n        hideModal(false);\n        addRecord((prevState) => {\n          return [\n            { Id: \"0\", clientId: response.data.clientId, ...formData },\n            ...prevState,\n          ];\n        });\n      })\n      .catch((err) => {\n        alert(\"Something went wrong\");\n      });\n  };\n\n  const editRecord = () => {\n    axios\n      .put(`/records/${record.clientId}`, formData)\n      .then(() => {\n        hideModal(false);\n        const renew = recordsList.map((r) => {\n          if (r.clientId == record.clientId) {\n            return { Id: record.id, clientId: record.clientId, ...formData };\n          } else {\n            return r;\n          }\n        });\n        addRecord(renew);\n      })\n      .catch((err) => {\n        alert(\"Something went wrong\");\n      });\n  };\n\n  return (\n    <div className=\"modal-container\">\n      <div className=\"modal-backgrop\" onClick={() => hideModal(false)}></div>\n      <div className=\"modal-content\">\n        <div className=\"modal-form\">\n          <div className=\"modal-head\">\n            <img\n              className=\"close-image\"\n              onClick={() => hideModal(false)}\n              src={close}\n              alt=\"close\"\n            />\n          </div>\n          <h2 className=\"title\">{title}</h2>\n          <div className=\"form-field-container\">\n            <div className=\"form-fields-column\">\n              <div className=\"form-fields\">\n                <label htmlFor=\"mark\">მწარმოებელი</label>\n                {onEdit ? (\n                  <input\n                    type=\"text\"\n                    id=\"mark\"\n                    className=\"modal-form-control\"\n                    placeholder=\"ჩაწერეთ მწარმოებელი\"\n                    value={formData.mark}\n                    onChange={(e) =>\n                      setFormData((prev) => {\n                        return { ...prev, mark: e.target.value };\n                      })\n                    }\n                  />\n                ) : (\n                  <input\n                    type=\"text\"\n                    id=\"მწარმოებელი\"\n                    className=\"modal-form-control\"\n                    placeholder=\"ჩაწერეთ მწარმოებელი\"\n                    value={formData.mark}\n                    disabled\n                    onChange={(e) =>\n                      setFormData((prev) => {\n                        return { ...prev, mark: e.target.value };\n                      })\n                    }\n                  />\n                )}\n              </div>\n              <div className=\"form-fields\">\n                <label htmlFor=\"model\">მოდელი</label>\n                {onEdit ? (\n                  <input\n                    type=\"text\"\n                    id=\"model\"\n                    className=\"modal-form-control\"\n                    placeholder=\"შეიყვანეთ მოდელი\"\n                    value={formData.model}\n                    onChange={(e) =>\n                      setFormData((prev) => {\n                        return { ...prev, model: e.target.value };\n                      })\n                    }\n                  />\n                ) : (\n                  <input\n                    type=\"text\"\n                    id=\"model\"\n                    className=\"modal-form-control\"\n                    placeholder=\"შეიყვანეთ მოდელი\"\n                    disabled\n                    value={formData.model}\n                    onChange={(e) =>\n                      setFormData((prev) => {\n                        return { ...prev, model: e.target.value };\n                      })\n                    }\n                  />\n                )}\n              </div>\n            </div>\n            <div className=\"form-fields-column\">\n              <div className=\"form-fields\">\n                <label htmlFor=\"location\">ქალაქი</label>\n                {onEdit ? (\n                  <input\n                    type=\"text\"\n                    id=\"location\"\n                    className=\"modal-form-control\"\n                    placeholder=\"შეიყვანეთ ქალაქი\"\n                    value={formData.location}\n                    onChange={(e) =>\n                      setFormData((prev) => {\n                        return { ...prev, location: e.target.value };\n                      })\n                    }\n                  />\n                ) : (\n                  <input\n                    type=\"text\"\n                    id=\"location\"\n                    className=\"modal-form-control\"\n                    placeholder=\"შეიყვანეთ ქალაქი\"\n                    disabled\n                    value={formData.location}\n                    onChange={(e) =>\n                      setFormData((prev) => {\n                        return { ...prev, location: e.target.value };\n                      })\n                    }\n                  />\n                )}\n              </div>\n              <div className=\"form-fields\">\n                <label htmlFor=\"phone\">ნომერი</label>\n                {onEdit ? (\n                  <input\n                    type=\"text\"\n                    id=\"phone\"\n                    className=\"modal-form-control\"\n                    placeholder=\"შეიყვანეთ ნომერი\"\n                    value={formData.phone}\n                    onChange={(e) =>\n                      setFormData((prev) => {\n                        return { ...prev, phone: e.target.value };\n                      })\n                    }\n                  />\n                ) : (\n                  <div\n                    className=\"modal-form-control\"\n                    style={{ border: \"none\" }}\n                  >\n                    {phones.map((number) => {\n                      return (\n                        <a\n                          href={`tel:${number}`}\n                          style={{ marginLeft: \"10px\", marginTop: \"10px\" }}\n                        >\n                          {number}{\" \"}\n                        </a>\n                      );\n                    })}\n                  </div>\n                )}\n              </div>\n            </div>\n            <div\n              className=\"comments-container\"\n              style={{ marginTop: \"20px\", marginBottom: \"5px\" }}\n            >\n              <label htmlFor=\"comment\" className=\"comments-label\">\n                კომენტარი\n              </label>\n              {onEdit ? (\n                <textarea\n                  className=\"comments-field\"\n                  style={{ marginTop: \"5px\" }}\n                  placeholder=\"შეიყვანეთ კომენტარი\"\n                  value={formData.comment}\n                  onChange={(e) =>\n                    setFormData((prev) => {\n                      return { ...prev, comment: e.target.value };\n                    })\n                  }\n                ></textarea>\n              ) : (\n                <textarea\n                  className=\"comments-field\"\n                  style={{ marginTop: \"5px\" }}\n                  disabled\n                  placeholder=\"შეიყვანეთ კომენტარი\"\n                  value={formData.comment}\n                  onChange={(e) =>\n                    setFormData((prev) => {\n                      return { ...prev, comment: e.target.value };\n                    })\n                  }\n                ></textarea>\n              )}\n            </div>\n            {onEdit &&\n              (addNew ? (\n                <div className=\"form-submit-container\">\n                  <button className=\"form-submit-button\" onClick={addNewRecord}>\n                    დამატება\n                  </button>\n                </div>\n              ) : (\n                <div className=\"form-submit-container\" onClick={editRecord}>\n                  <button className=\"form-submit-button\">შენახვა</button>\n                </div>\n              ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","/home/www/autoparts/client/src/Components/Popup.js",["64","65"],[],"import React from \"react\";\nimport axios from \"axios\";\n\nconst Popup = ({active, records, setRecords, hideModal}) => {\n\n    const deleteRecord = () => {\n        axios.delete(`/records/${active.clientId}`)\n        .then(() => {\n          const renew = records.filter((record) => {\n            if(record.clientId != active.clientId) return record; \n          })\n    \n          setRecords(renew);\n          hideModal(false)\n        })\n        .catch(() => {\n          console.log(\"records was not deleted\")\n        })\n      }\n\n  return (\n    <div className=\"modal-container\">\n      <div className=\"modal-backgrop\" onClick={() => hideModal(false)}></div>\n      <div className=\"modal-content\" style={{width: \"400px\", height: \"180px\"}}>\n        <div className=\"confirmation-box\">\n            <p>ნამდვილად გსურთ ამ ჩანაწერის წაშლა?</p>\n            <div className=\"confirmation-buttons\">\n                <div className=\"yes\" onClick={deleteRecord}>\n                    დიახ\n                </div>\n                <div className=\"no\" onClick={() => hideModal(false)}>\n                    არა\n                </div>\n            </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Popup;\n","/home/www/autoparts/client/src/Components/Common/DataTable.js",["66"],[],"// noinspection JSValidateTypes, JSUnusedAssignment\nimport React, { useState, Fragment, useRef, useLayoutEffect } from \"react\";\nimport Util from \"./Converter\";\nimport { Listbox } from \"@headlessui/react\";\nimport { Menu } from \"@headlessui/react\";\nimport Pager from \"./Pager\";\n\nconst Card = {\n  header: ({ item, actions }) => (\n    <li className={`header-row`}>\n      {Object.keys(item).map((k) => (\n        <span className={`sdt-${Util.camel.toDash(k)}`} key={k}>\n          {Util.camel.toSpace(k)}\n        </span>\n      ))}\n      {!Util.object.isEmpty(actions.individual) && (\n        <span className=\"sdt-actions\" />\n      )}\n    </li>\n  ),\n  item: ({ item, actions }) => (\n    <li className={item.selected === true ? `data-row red-bg` : `data-row`}>\n      {Object.entries(item).map(([k, v]) => (\n        Util.camel.toDash(k) !== \"phone\" ? (\n          <span\n          title={`${Util.object.toLabel(v)}`}\n          className={`sdt-${Util.camel.toDash(k)}`}\n          key={k}\n        >\n          {Util.object.toLabel(v)}\n        </span>\n        ) : (\n          <span\n          title={`${Util.object.toLabel(v)}`}\n          className={`sdt-${Util.camel.toDash(k)}`}\n          key={k}\n        >\n          {Util.object.toLabel(v).replace(/\\s\\s+/g, ' ').split(\" \").map((num) => {\n            const setNumber = num;\n            return(\n              <a href={`tel:${setNumber}`} key={setNumber}> {setNumber} </a>\n            )\n          })}\n        </span>\n        )\n      ))}\n      {!Util.object.isEmpty(actions.individual) && (\n        <Menu as=\"span\" className=\"sdt-actions\">\n          <Menu.Button as=\"div\" className=\"sdt-actions-toggle\">\n            {/* <i className=\"fa fa-ellipsis-v\"/> */}\n            <svg\n              fill=\"#ffffff\"\n              aria-hidden=\"true\"\n              height=\"40px\"\n              width=\"12px\"\n              version=\"1.1\"\n              id=\"Icons\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n              viewBox=\"0 0 32 32\"\n              xmlSpace=\"preserve\"\n            >\n              <g>\n                <path d=\"M16,10c1.7,0,3-1.3,3-3s-1.3-3-3-3s-3,1.3-3,3S14.3,10,16,10z\" />\n                <path d=\"M16,13c-1.7,0-3,1.3-3,3s1.3,3,3,3s3-1.3,3-3S17.7,13,16,13z\" />\n                <path d=\"M16,22c-1.7,0-3,1.3-3,3s1.3,3,3,3s3-1.3,3-3S17.7,22,16,22z\" />\n              </g>\n            </svg>\n          </Menu.Button>\n          <Menu.Items className=\"sdt-actions-popup\" as=\"ul\">\n            {Object.entries(actions.individual).map(\n              ([k, v]) =>\n                v.enabled(item) && (\n                  <Menu.Item key={k}>\n                    {({ active }) => (\n                      <li\n                        onClick={() => v.action(item)}\n                        className={`${active ? \"popup-menu-active\" : \"\"}`}\n                      >\n                        {Util.camel.toSpace(k)}\n                      </li>\n                    )}\n                  </Menu.Item>\n                )\n            )}\n          </Menu.Items>\n        </Menu>\n      )}\n    </li>\n  ),\n};\n\nconst SimpleDataTable = ({\n  items,\n  card,\n  cardHeader,\n  filterables = [],\n  searchable = [],\n  size = 10,\n  actions = { main: {}, individual: {} },\n}) => {\n  const [filter, setFilter] = useState({});\n  const [searchKey, setSearchKey] = useState(\"\");\n  const [page, setPage] = useState(0);\n  const simple = useRef();\n\n  useLayoutEffect(() => {\n    if (!simple.current) return;\n    const marks = simple.current.querySelectorAll(\n      \"ul.simple-data-rows > li.data-row > span:not(.sdt-actions) strong.search-mark\"\n    );\n    Util.array\n      .unique(Array.from(marks).map((m) => m.parentNode))\n      .forEach((p) => (p.innerHTML = p.innerText));\n    if (!searchKey) return;\n    const leaves = simple.current.querySelectorAll(\n      \"ul.simple-data-rows > li.data-row > span:not(.sdt-actions):not(:has(*)), ul.simple-data-rows > li.data-row > span:not(.sdt-actions) *:not(:has(*))\"\n    );\n    leaves.forEach((s) => (s.innerHTML = mark(s.innerText)));\n  });\n\n  const TopBar = ({ children }) => (\n    <div className={`top-bar`}>\n      <div className={`actions`}>\n        {Object.entries(actions.main).map(([k, v]) => (\n          <button onClick={v} key={k} className={`sdt-${Util.camel.toDash(k)}`}>\n            {Util.camel.toSpace(k)}\n          </button>\n        ))}\n      </div>\n      {children}\n    </div>\n  );\n\n  if (!items.length)\n    return (\n      <div className=\"simple-data-table\">\n        <TopBar />\n        <div className=\"sdt-empty\">No items to display</div>\n      </div>\n    );\n\n  const filters = filterables.map((f) => ({\n    name: f,\n    options: Util.array.unique(items.map((i) => i[f])),\n  }));\n  filters.forEach((f) => {\n    f.options = [{ id: -1, name: `All ${f.name}` }, ...f.options];\n    if (filter[f.name] && f.options.some((fo) => fo.id === filter[f.name].id))\n      return;\n    filter[f.name] = f.options[0];\n    setFilter(filter);\n  });\n\n  const mark = (s) => {\n    return s.replace(\n      new RegExp(\n        [searchKey]\n          .map(function (x) {\n            return x.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n          })\n          .join(\"|\"),\n        \"gi\"\n      ),\n      '<strong class=\"search-mark\">$&</strong>'\n    );\n  };\n\n  const shown = items\n    .filter((i) =>\n      Object.entries(filter).every(([k, v]) => v.id === -1 || i[k].id === v.id)\n    )\n    .filter((i) =>\n      searchable.length\n        ? searchable.some((c) => Util.object.has(i[c], searchKey))\n        : true\n    );\n\n  Object.entries(actions.individual).forEach(\n    ([k, v]) =>\n      (actions.individual[k] = Util.object.isObject(v)\n        ? v\n        : {\n            action: v,\n            enabled: () => true,\n          })\n  );\n\n  cardHeader = cardHeader ? cardHeader : Util.func.empty;\n  card = card && cardHeader ? { header: cardHeader, item: card } : Card;\n\n  const handle = {\n    filter: (k, v) => {\n      setFilter({ ...filter, [k]: v });\n      setPage(0);\n    },\n    search(e) {\n      if (e.key !== \"Enter\") return;\n      setSearchKey(e.target.value);\n      setPage(0);\n    },\n  };\n\n  return (\n    <div className={`simple-data-table`} ref={simple}>\n      <TopBar>\n        {searchable.length > 0 && (\n          <div className={\"sdt-search\"}>\n            <input\n              type=\"text\"\n              placeholder={\"ძებნა\"}\n              className={\"form-control\"}\n              defaultValue={searchKey}\n              onKeyDown={handle.search}\n            />\n          </div>\n        )}\n        <div className={`sdt-filters`}>\n          {filters.map((f) => (\n            <div className={`sdt-filter`} key={f.name}>\n              <Listbox\n                value={filter[f.name]}\n                key={filter[f.name].id}\n                onChange={(v) => handle.filter(f.name, v)}\n              >\n                <Listbox.Button>\n                  <span>{filter[f.name].name}</span>\n                </Listbox.Button>\n                <Listbox.Options>\n                  {f.options.map((s) => (\n                    <Listbox.Option key={s.id} value={s} as={Fragment}>\n                      {({ active }) => (\n                        <li className={`${active ? \"popup-menu-active\" : \"\"}`}>\n                          {s.name}\n                        </li>\n                      )}\n                    </Listbox.Option>\n                  ))}\n                </Listbox.Options>\n              </Listbox>\n            </div>\n          ))}\n        </div>\n      </TopBar>\n      <ul className={`simple-data-rows`}>\n        <card.header item={items[0]} actions={actions} />\n        {shown.slice(page * size, (page + 1) * size).map((item) => (\n          <card.item key={item.id} item={item} actions={actions} />\n        ))}\n      </ul>\n      <Pager size={size} page={page} count={shown.length} setPage={setPage} />\n    </div>\n  );\n};\n\nexport default SimpleDataTable;\n","/home/www/autoparts/client/src/Components/Common/Converter.js",["67"],[],"import moment from \"moment\";\nconst Util = {\n    camel: {\n        toDash: s => s.replace(/[A-Z]/g, m => \"-\" + m.toLowerCase()),\n        toSpace: s => Util.camel.toDash(s).replaceAll(\"-\", \" \")\n    },\n    object: {\n        toLabel: s => {\n            if(!s) return '';\n            let label = '';\n            const tmpArray = []\n            if(Array.isArray(s)) {\n                s.map((i)=>{\n                    typeof i === 'object'?tmpArray.push(i.name):tmpArray.push(i)\n                })\n                label = tmpArray.join(', ')\n            }\n            else if(typeof s === 'object') label = s.name;\n            else label = s;\n            return label;\n        },\n        has: (s, term) => {\n            const searchee = s.name ?? s\n            return searchee.toString().toLowerCase().includes(term.toLowerCase())\n        },\n        isEmpty: s => s && Object.keys(s).length === 0,\n        isObject: s => typeof s === 'object' && !Array.isArray(s) && s !== null,\n        isUrl: (url) => {\n            try {\n                return Boolean(new URL(url))\n            }\n            catch (_){\n                return false;\n            }\n        }\n    },\n    array: {\n        unique: arr => {\n            const hash = { }\n            arr.forEach(i => hash[i.id] = i)\n            return Object.values(hash).sort((a, b) => a.id - b.id)\n        },\n        isEmpty: arr => {\n            return Array.isArray(arr) && arr.length === 0\n        },\n    },\n    func: {\n        empty: () => { /* NOP */ }\n    },\n    date:{\n        from:(date)=>{\n            return moment(date).fromNow();\n        },\n        only:(date)=>{\n            return moment(date).format('l');\n        },\n        hub:(date)=>{\n            return moment(date).format('MM/DD/YYYY');\n        },\n        time:(date)=>{\n            return moment(date).format(\"MM-DD-YYYY HH:mm:ss\");\n        }\n    },\n    getParam(key) {\n    let result = false,\n        tmp = [];\n    let items = window.location.search.substr(1).split(\"&\");\n    for (let index = 0; index < items.length; index++) {\n        tmp = items[index].split(\"=\");\n        if (tmp[0] === key) {\n            result = decodeURIComponent(tmp[1]);\n        }\n    }\n    return result;\n    }\n}\n\nexport default Util","/home/www/autoparts/client/src/Components/Common/Pager.js",[],[],{"ruleId":"68","severity":1,"message":"69","line":7,"column":8,"nodeType":"70","messageId":"71","endLine":7,"endColumn":13},{"ruleId":"72","severity":1,"message":"73","line":14,"column":27,"nodeType":"74","messageId":"75","endLine":14,"endColumn":29},{"ruleId":"72","severity":1,"message":"73","line":15,"column":31,"nodeType":"74","messageId":"75","endLine":15,"endColumn":33},{"ruleId":"72","severity":1,"message":"73","line":40,"column":18,"nodeType":"74","messageId":"75","endLine":40,"endColumn":20},{"ruleId":"72","severity":1,"message":"73","line":18,"column":27,"nodeType":"74","messageId":"75","endLine":18,"endColumn":29},{"ruleId":"72","severity":1,"message":"73","line":19,"column":31,"nodeType":"74","messageId":"75","endLine":19,"endColumn":33},{"ruleId":"72","severity":1,"message":"73","line":48,"column":26,"nodeType":"74","messageId":"75","endLine":48,"endColumn":28},{"ruleId":"76","severity":1,"message":"77","line":9,"column":49,"nodeType":"78","messageId":"79","endLine":9,"endColumn":51},{"ruleId":"72","severity":1,"message":"80","line":10,"column":32,"nodeType":"74","messageId":"75","endLine":10,"endColumn":34},{"ruleId":"81","severity":1,"message":"82","line":160,"column":33,"nodeType":"83","messageId":"84","endLine":160,"endColumn":34,"suggestions":"85"},{"ruleId":"76","severity":1,"message":"86","line":13,"column":26,"nodeType":"78","messageId":"87","endLine":13,"endColumn":28},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Expected '!==' and instead saw '!='.","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["88","89"],"Array.prototype.map() expects a return value from arrow function.","expectedInside",{"messageId":"90","fix":"91","desc":"92"},{"messageId":"93","fix":"94","desc":"95"},"removeEscape",{"range":"96","text":"97"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"98","text":"99"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[5086,5087],"",[5086,5086],"\\"]